name: GitVersion Demo
on: 
  workflow_dispatch
  
jobs:
  demo:
    name: GitVersion Demonstration
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
              
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
         versionSpec: '5.x'
            
      - name: Display GitVersion config
        uses: gittools/actions/gitversion/execute@v0
        with:
          # useConfigFile: true
          additionalArguments: '/showConfig'
          
      - id: determine-version
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v0
              
      - name: Display GitVersion outputs (step output)
        run: |
          echo "Major: ${{ steps.determine-version.outputs.major }}"
          echo "Minor: ${{ steps.determine-version.outputs.minor }}"
          echo "Patch: ${{ steps.determine-version.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.determine-version.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.determine-version.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.determine-version.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.determine-version.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.determine-version.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.determine-version.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.determine-version.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.determine-version.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.determine-version.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.determine-version.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.determine-version.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.determine-version.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.determine-version.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.determine-version.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.determine-version.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.determine-version.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.determine-version.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.determine-version.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.determine-version.outputs.sha }}"
          echo "ShortSha: ${{ steps.determine-version.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.determine-version.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.determine-version.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.determine-version.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.determine-version.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.determine-version.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.determine-version.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.determine-version.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.determine-version.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.determine-version.outputs.commitDate }}"
